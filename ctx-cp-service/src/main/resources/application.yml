eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:9001/eureka/
  instance:
    prefer-ip-address: true

server:
  port: 9029

spring:
  # profiles:
  # active: aws
  application:
    name: CounterPartyService
  redis:
    database: 1
    # Redis服务器地址
    host: 192.168.100.12
    # Redis服务器连接端口
    port: 6379
    # Redis服务器连接密码（默认为空）
    password: 9Cpa7vy5nqup0A1s
    # 连接池最大连接数（使用负值表示没有限制）
    jedis:
      pool:
        max-active: 200
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1
        # 连接池中的最大空闲连接
        max-idle: 10
        # 连接池中的最小空闲连接

        min-idle: 0

    # 连接超时时间（毫秒）
    timeout: 10000
  datasource:
    url: jdbc:mysql://192.168.100.12:3306/cp?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true
    username: root
    password: EYcaDDDoLZ2waFCv # password
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      initial-size: 10
      max-active: 10


  rabbitmq:
    host: 192.168.100.11
    port: 5672
    username: app # root
    password: password # aFlwDfPQh6slYsuP
    virtual-host: app

feign:
  client:
    default:
      #这里时间一定要调长，否则feign客户端会报ReadTimeOut  服务端报Error parsing HTTP request header
      connectTimeout: 30000
      readTimeout: 30000
      loggerLevel: basic

#开放所有页面节点  默认只开启了health、info两个节点

management:
  endpoint:
    health:
      enabled: true
      show-details: always
    metrics:
      enabled: true
  endpoints:
    web:
      exposure:
        include: '*'
    enabled-by-default: false

mybatis:
  type-aliases-package: sg.ctx.ps.domain
  mapper-locations:
    - classpath*:sg/**/mapper/*.xml

swagger:
  basePackage: sg.ctx.ps.controller # api 文档包名， 产品环境配置成com.product, 这样不会显示任何API

logging:
  path: c:/logs/CPService
  level:
    root: INFO
  config: classpath:logging-config.xml

ctx:
  paging:
    size: 10
  distributed:
    lock:
      time-out: 30

cp:
  depth:
    strategy: default # bequant, default

bequant:
  orderbook:
    url: https://api.bequant.io/api/2/public/orderbook